name: Network Test

on: [workflow_dispatch]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Check network connectivity
        run: |
          echo "Testing connection to: ${{ secrets.SERVER_HOST }}"
          ping -c 3 ${{ secrets.SERVER_HOST }} || echo "Ping failed"
          telnet ${{ secrets.SERVER_HOST }} 22 || echo "Port 22 closed"
          curl -s ifconfig.me && echo " - GitHub Actions IP"









#name: Deploy rr4-bot

#on:
#  push:
#    branches: master
#  pull_request:
#    branches: master
#  workflow_dispatch:
#env:
#  REGISTRY: ghcr.io
#  IMAGE_NAME: ${{ github.repository }}
#  CONTAINER_NAME: rr4-bot
#
#jobs:
#  build-and-push:
#    name: Build and Push Docker Image
#    runs-on: ubuntu-latest
#    permissions:
#      contents: read
#      packages: write
#    
#    steps:
#    - name: Checkout code
#      uses: actions/checkout@v4
#    - name: Set up Docker Buildx
#      uses: docker/setup-buildx-action@v3
#    - name: Log in to Container Registry
#      uses: docker/login-action@v3
#      with:
#        registry: ${{ env.REGISTRY }}
#        username: ${{ github.actor }}
#        password: ${{ secrets.GITHUB_TOKEN }}
#    - name: Extract metadata for Docker
#      id: meta
#      uses: docker/metadata-action@v5
#      with:
#        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
#        tags: |
#          type=ref,event=branch
#          type=sha,prefix={{branch}}-
#          latest
#    - name: Build and push Docker image
#      uses: docker/build-push-action@v5
#      with:
#        context: .
#        file: ./Dockerfile
#        push: true
#        tags: ${{ steps.meta.outputs.tags }}
#        labels: ${{ steps.meta.outputs.labels }}
#        cache-from: type=gha
#        cache-to: type=gha,mode=max
#
#  deploy:
#    name: Deploy to Server
#    runs-on: ubuntu-latest
#    needs: build-and-push
#    environment: production
#    
#    steps:
#    - name: Deploy via SSH
#      uses: appleboy/ssh-action@v1.0.3
#      with:
#        host: ${{ secrets.SERVER_HOST }}
#        username: ${{ secrets.SERVER_USERNAME }}
#        key: ${{ secrets.SERVER_SSH_KEY }}
#        script: |
#          cd /path/to/your/bot/directory
#          echo "BOT_TOKEN=${{ secrets.BOT_TOKEN }}" > .env
#          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
#          docker-compose pull
#          docker-compose up -d
#          docker image prune -f
